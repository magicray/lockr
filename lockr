#!/usr/bin/env python
import os
import ssl
import time
import socket
import struct
import select
import optparse


def log(msg):
    timestamp = time.time()
    os.write(2, '{0}.{1} : {2}\n'.format(
        time.strftime('%y%m%d.%H%M%S', time.gmtime(timestamp)),
        '%06d' % ((timestamp - int(timestamp)) * 10**6),
        msg))


class EPollLoop(object):
    def __init__(self, port):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock.bind(('0.0.0.0', port))
        self.sock.listen(5)
        self.sock.setblocking(0)

        self.epoll = select.epoll()
        self.epoll.register(self.sock.fileno(), select.EPOLLIN)

        self.servers = dict()
        self.connections = dict()

        self.clients = list()
        self.last_timestamp = time.time()

    def register_server(self, proto, class_name):
        self.servers[proto] = class_name

    def connect(self, handler, ip, port, proto):
        self.clients.append((handler, ip, port, proto))

    def run(self):
        def recv(fileno, size):
            conn = self.connections[fileno]
            buf = conn['sock'].recv(size)
            if 0 == len(buf):
                raise Exception('receive failed')

            return buf

        while True:
            for fileno, event in self.epoll.poll(0.1):
                log('event {0} {1}'.format(fileno, event))
                try:
                    if self.sock.fileno() == fileno:
                        sock, addr = self.sock.accept()
                        log('addr{0} connected'.format(addr))
                        sock.setblocking(0)
                        sock=ssl.wrap_socket(sock,
                                             keyfile='key',
                                             certfile='cert',
                                             do_handshake_on_connect=False,
                                             server_side=True)
                        self.connections[sock.fileno()] = dict(
                            sock=sock,
                            handshake_done=False,
                            peer=sock.getpeername())
                        try:
                            sock.do_handshake()
                            conn['handshake_done'] = True
                        except ssl.SSLError as e:
                            if ssl.SSL_ERROR_WANT_READ == e.errno:
                                self.epoll.register(sock.fileno(), select.EPOLLIN)
                            elif ssl.SSL_ERROR_WANT_WRITE == e.errno:
                                self.epoll.register(sock.fileno(), select.EPOLLOUT)
                            else:
                               raise
                    else:
                        conn = self.connections[fileno]
                        peer = conn.get('peer')
                        sock = conn.get('sock')
                        result = None
                        flags = select.EPOLLIN

                        if False == conn['handshake_done']:
                            try:
                                sock.do_handshake()
                                conn['handshake_done'] = True
                            except ssl.SSLError as e:
                              if ssl.SSL_ERROR_WANT_READ == e.errno:
                                self.epoll.register(sock.fileno(), select.EPOLLIN)
                              elif ssl.SSL_ERROR_WANT_WRITE == e.errno:
                                self.epoll.register(sock.fileno(), select.EPOLLOUT)
                              else:
                                raise
                            break

                        if event & select.EPOLLIN:
                            if 'handler' not in conn:
                                proto = struct.unpack('!B', recv(fileno, 1))[0]
                                conn['handler'] = self.servers[proto]()
                                conn['in_hdr_size'] = 4
                                conn['in_hdr_pkts'] = list()
                                result = conn['handler'].on_accept(peer)
                            elif 'in_size' not in conn:
                                pkt = recv(fileno, conn['in_hdr_size'])
                                conn['in_hdr_pkts'].append(pkt)
                                conn['in_hdr_size'] -= len(pkt)
                                if 0 == conn['in_hdr_size']:
                                    size = struct.unpack(
                                        '!I',
                                        ''.join(conn['in_hdr_pkts']))[0]
                                    if 0 == size:
                                        result = conn['handler'].on_recv('')
                                    else:
                                        conn['in_size'] = size
                                        conn['in_pkts'] = list()
                                    conn['in_hdr_size'] = 4
                                    conn['in_hdr_pkts'] = list()
                            else:
                                pkt = recv(fileno, conn['in_size'])
                                conn['in_pkts'].append(pkt)
                                conn['in_size'] -= len(pkt)
                                if 0 == conn['in_size']:
                                    buf = ''.join(conn['in_pkts'])
                                    del(conn['in_size'])
                                    del(conn['in_pkts'])
                                    result = conn['handler'].on_recv(buf)

                        if event & select.EPOLLOUT:
                            if 'out_pkt' not in conn:
                                if 'peer' not in conn:
                                    proto = struct.pack('!B', conn['proto'])
                                    conn['sock'].send(proto)
                                    conn['peer'] = conn['sock'].getpeername()
                                    conn['in_hdr_size'] = 4
                                    conn['in_hdr_pkts'] = list()
                                    conn['handler'].on_connect(conn['peer'])
                                    flags |= select.EPOLLOUT
                                else:
                                    result = conn['handler'].on_send()
                            else:
                                if 4 != conn['out_hdr_sent']:
                                    pkt = conn['out_hdr']
                                    n = sock.send(pkt[conn['out_hdr_sent']:])
                                    conn['out_hdr_sent'] += n
                                else:
                                    pkt = conn['out_pkt']
                                    if len(pkt) > conn['out_sent']:
                                        n = sock.send(pkt[conn['out_sent']:])
                                        conn['out_sent'] += n
                                    else:
                                        del(conn['out_sent'])
                                        del(conn['out_hdr_sent'])
                                        del(conn['out_hdr'])
                                        del(conn['out_pkt'])
                                        result = conn['handler'].on_send()

                        if result is not None:
                            key, value = result
                            if 'send' == key:
                                conn['out_pkt'] = value
                                conn['out_hdr'] = struct.pack('!I', len(value))
                                conn['out_sent'] = 0
                                conn['out_hdr_sent'] = 0

                        if 'out_pkt' in conn:
                            flags |= select.EPOLLOUT

                        self.epoll.modify(fileno, flags)

                    if event & ~(select.EPOLLIN | select.EPOLLOUT):
                        raise Exception('unhandled event({0})'.format(event))

                except Exception as e:
                    conn = self.connections[fileno]
                    if 'handler' in conn:
                        if 'peer' in conn:
                            self.connections[fileno]['handler'].on_close()

                        if 'proto' in conn:
                            self.connect(conn['handler'],
                                         conn['ip'],
                                         conn['port'],
                                         conn['proto'])

                    self.epoll.unregister(fileno)
                    log('disconnected addr{0} {1}'.format(
                        conn.get('peer'),
                        str(e)))
                    conn['sock'].close()
                    del(self.connections[fileno])

            if time.time() > (self.last_timestamp + 5.1):
                self.last_timestamp = time.time()
                while self.clients:
                    handler, ip, port, proto = self.clients.pop()
                    try:
                        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        s.setblocking(0)
                        s = ssl.wrap_socket(s, do_handshake_on_connect=False, server_side=False)
                        self.connections[s.fileno()] = dict(
                            sock=s,
                            ip=ip,
                            port=port,
                            proto=proto,
                            handshake_done=False,
                            handler=handler)
                        self.epoll.register(s.fileno(), select.EPOLLIN|select.EPOLLOUT)
                        s.connect((ip, int(port)))
                    except:
                        pass


class StatsServer():
    def on_accept(self, peer):
        self.peer = peer

    def on_recv(self, buf):
        log('on_recv stats_server{0} {1}'.format(self.peer, buf))
        return ('send', buf)

    def on_send(self):
        pass

    def on_close(self):
        log('on_close stats_server{0}'.format(self.peer))


class StatsClient():
    def on_connect(self, peer):
        self.peer = peer

    def on_close(self):
        log('on_close stats_server{0}'.format(self.peer))

    def on_recv(self, buf):
        log('on_recv stats_client{0} {1}'.format(self.peer, buf))

    def on_send(self):
        return ('send', 'ABCD')


def test(ip, port):
    sock = ssl.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
    sock.connect((ip, port))
    sock.send(struct.pack('!B', 83))

    while True:
        for i in range(10):
            sock.send(struct.pack('!I', i))
            if i > 0:
                sock.send(str(i) * i)
            length = struct.unpack('!I', sock.recv(4))[0]
            if length > 0:
                print(sock.recv(length))

if '__main__' == __name__:
    parser = optparse.OptionParser()
    parser.add_option('--peers', dest='peers', type='string')
    parser.add_option('--port', dest='port', type='int')
    opt, args = parser.parse_args()

    if 'server' == args[0]:
        app = EPollLoop(opt.port)
        app.register_server(83, StatsServer)
        for peer in opt.peers.split(','):
            ip, port = peer.split(':')
            app.connect(StatsClient(), ip, port, 83)
        app.run()
    else:
        test('127.0.0.1', opt.port)
