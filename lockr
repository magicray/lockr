#!/usr/bin/env python
import os
import ssl
import time
import json
import socket
import struct
import select
import optparse
from OpenSSL import crypto


######## Logger ################################################################
def log(msg):
    timestamp = time.time()
    os.write(2, '{0}.{1} : {2}\n'.format(
        time.strftime('%y%m%d.%H%M%S', time.gmtime(timestamp)),
        '%06d' % ((timestamp - int(timestamp)) * 10**6),
        msg))


######## SSL/EPoll Loop ########################################################
class EPollLoop(object):
    def __init__(self, port, servers):
        key = crypto.PKey()
        key.generate_key(crypto.TYPE_RSA, 1024)
        cert = crypto.X509()
        cert.gmtime_adj_notBefore(0)
        cert.gmtime_adj_notAfter(30*24*60*60)
        cert.set_pubkey(key)
        cert.sign(key, 'sha1')

        with open('cert', 'w') as fd:
            fd.write(crypto.dump_certificate(crypto.FILETYPE_PEM, cert))
        with open('key', 'w') as fd:
            fd.write(crypto.dump_privatekey(crypto.FILETYPE_PEM, key))

        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock.bind(('0.0.0.0', port))
        self.sock.listen(5)
        self.sock.setblocking(0)

        self.epoll = select.epoll()
        self.epoll.register(self.sock.fileno(), select.EPOLLIN)

        self.servers = servers
        self.connections = dict()

    def connect(self, handler):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.setblocking(0)
        self.connections[s.fileno()] = dict(
            sock=s,
            handshake_done=False,
            handler=handler)
        self.epoll.register(s.fileno(), select.EPOLLOUT)
        try:
            s.connect((handler.conn['ip'], handler.conn['port']))
        except Exception as e:
            if 115 != e.errno:
                raise

    def run(self):
        while True:
            for fileno, event in self.epoll.poll():
                if self.sock.fileno() == fileno:
                    sock, addr = self.sock.accept()
                    sock.setblocking(0)
                    sock=ssl.wrap_socket(sock,
                                         keyfile='key',
                                         certfile='cert',
                                         do_handshake_on_connect=False,
                                         server_side=True)
                    self.connections[sock.fileno()] = dict(
                        sock=sock,
                        handshake_done=False,
                        peer=sock.getpeername())
                    self.epoll.register(sock.fileno(), select.EPOLLIN)
                    continue

                try:
                    conn = self.connections[fileno]

                    if False == conn['handshake_done']:
                        if getattr(conn['sock'], 'do_handshake', None) is None:
                            conn['sock'] = ssl.wrap_socket(
                                conn['sock'],
                                do_handshake_on_connect=False,
                                server_side=False)

                        try:
                            conn['sock'].do_handshake()
                            conn['handshake_done'] = True
                            if 'handler' in conn:
                                self.epoll.modify(fileno, select.EPOLLOUT)
                            else:
                                self.epoll.modify(fileno, select.EPOLLIN)
                        except ssl.SSLError as e:
                            if ssl.SSL_ERROR_WANT_READ == e.errno:
                                self.epoll.modify(fileno, select.EPOLLIN)
                            elif ssl.SSL_ERROR_WANT_WRITE == e.errno:
                                self.epoll.modify(fileno, select.EPOLLOUT)
                            else:
                                raise
                        continue

                    result = None

                    if event & select.EPOLLIN:
                        flags = select.EPOLLIN
                        if 'handler' not in conn:
                            read_bytes = 1
                        elif 'in_size' not in conn:
                            read_bytes = conn['in_hdr_size']
                        else:
                            read_bytes = conn['in_size']

                        try:
                            buf = conn['sock'].recv(read_bytes)
                        except Exception as e:
                            self.epoll.modify(fileno, select.EPOLLIN)
                            continue

                        if 0 == len(buf):
                            raise Exception('recv returned zero bytes')

                        if 'handler' not in conn:
                            proto = struct.unpack('!B', buf)[0]
                            conn['handler'] = self.servers[proto]()
                            conn['in_hdr_size'] = 4
                            conn['in_hdr_pkts'] = list()
                            log('accepted {0}'.format(conn['peer']))
                            result = conn['handler'].on_accept(conn['peer'])
                        elif 'in_size' not in conn:
                            conn['in_hdr_pkts'].append(buf)
                            conn['in_hdr_size'] -= len(buf)
                            if 0 == conn['in_hdr_size']:
                                size = struct.unpack(
                                    '!I',
                                    ''.join(conn['in_hdr_pkts']))[0]
                                if 0 == size:
                                    result = conn['handler'].on_recv('')
                                else:
                                    conn['in_size'] = size
                                    conn['in_pkts'] = list()
                                conn['in_hdr_size'] = 4
                                conn['in_hdr_pkts'] = list()
                        else:
                            conn['in_pkts'].append(buf)
                            conn['in_size'] -= len(buf)
                            if 0 == conn['in_size']:
                                pkt = ''.join(conn['in_pkts'])
                                del(conn['in_size'])
                                del(conn['in_pkts'])
                                result = conn['handler'].on_recv(pkt)

                    if event & select.EPOLLOUT:
                        flags = select.EPOLLOUT
                        if 'out_pkt' not in conn:
                            if 'peer' not in conn:
                                proto = struct.pack(
                                    '!B',
                                    conn['handler'].conn['proto'])
                                if 1 == conn['sock'].send(proto):
                                    conn['peer'] = conn['sock'].getpeername()
                                    conn['in_hdr_size'] = 4
                                    conn['in_hdr_pkts'] = list()
                                    log('connected {0}'.format(conn['peer']))
                                    result = conn['handler'].on_connect()
                                else:
                                    log('unexpected code path')
                                    exit(0)
                            else:
                                result = conn['handler'].on_send()
                        else:
                            if 4 != conn['out_hdr_sent']:
                                if 'snd_hdr' not in conn:
                                    pkt = conn['out_hdr']
                                    offset = conn['out_hdr_sent']
                                    conn['snd_hdr'] = pkt[offset:]

                                n = conn['sock'].send(conn['snd_hdr'])
                                if n > 0:
                                    del(conn['snd_hdr'])
                                    conn['out_hdr_sent'] += n
                            else:
                                pkt = conn['out_pkt']
                                if len(pkt) > conn['out_sent']:
                                    if 'snd_pkt' not in conn:
                                        offset = conn['out_sent']
                                        conn['snd_pkt'] = pkt[offset:]

                                    n = conn['sock'].send(conn['snd_pkt'])
                                    if n > 0:
                                        del(conn['snd_pkt'])
                                        conn['out_sent'] += n
                                else:
                                    del(conn['out_sent'])
                                    del(conn['out_hdr_sent'])
                                    del(conn['out_hdr'])
                                    del(conn['out_pkt'])
                                    result = conn['handler'].on_send()
                                    flags = select.EPOLLIN

                    if result is not None:
                        key, value = result
                        if 'send' == key:
                            conn['out_pkt'] = value
                            conn['out_hdr'] = struct.pack('!I', len(value))
                            conn['out_sent'] = 0
                            conn['out_hdr_sent'] = 0
                            flags = select.EPOLLOUT

                    self.epoll.modify(fileno, flags)

                    if event & ~(select.EPOLLIN | select.EPOLLOUT):
                        raise Exception('unhandled event({0})'.format(event))

                except Exception as e:
                    conn = self.connections[fileno]
                    del(self.connections[fileno])
                    self.epoll.unregister(fileno)
                    conn['sock'].close()
                    if 'peer' in conn:
                        log('disconnected peer{0} reason({1})'.format(
                            conn['peer'], str(e)))
                    if 'handler' in conn:
                        result = conn['handler'].on_close()
                        if result and ('connect' == result[0]):
                            self.connect(result[1])


######## Lockr #################################################################
my_state = dict(
    file_a=0,
    file_y=0,
    size_y=0,
    file_z=0,
    size_z=0,
    committed=0,
    peer_count=0)

peer_state = dict()

class StatsServer():
    def __init__(self):
        self.conn = dict()

    def on_accept(self, peer):
        self.peer = peer
        return ('send', json.dumps(my_state))

    def on_recv(self, buf):
        return ('send', json.dumps(my_state))

    def on_send(self):
        pass

    def on_close(self):
        pass


class StatsClient():
    def __init__(self, conn):
        self.conn = conn

    def on_connect(self):
        return ('send', 'ok')

    def on_recv(self, buf):
        peer_state[(self.conn['ip'], self.conn['port'])] = json.loads(buf)
        return ('send', 'ok')

    def on_send(self):
        pass

    def on_close(self):
        peer_state[(self.conn['ip'], self.conn['port'])] = None
        return ('connect', self)


class LockrServer():
    def __init__(self):
        self.conn = dict()

    def on_accept(self, peer):
        self.peer = peer

    def on_recv(self, buf):
        cmd = struct.unpack('!B', buf[0])[0]
        res = ''

        if 0 == cmd:
            state = dict()
            for ip, port in peer_state:
                state['{0}:{1}'.format(ip, port)] = peer_state[(ip, port)]
            res = json.dumps(dict(my_state=my_state, peer_state=state))

        return ('send', res)

    def on_send(self):
        pass

    def on_close(self):
        pass


class Lockr(object):
    def __init__(self, servers):
        self.servers = servers
        self.sock = self.connect()

    def connect(self):
        for ip, port in self.servers:
            try:
                print((ip, port))
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock = ssl.wrap_socket(sock)
                sock.connect((ip, port))
                sock.send(struct.pack('!B', 200))
                return sock
            except:
                pass
        raise Exception('could not connect to server')

    def request(self, buf):
        def recv(length):
            pkt = list()
            while length > 0:
                pkt.append(self.sock.recv(length))
                if 0 == len(pkt[-1]):
                    raise Exception('connection closed')
                length -= len(pkt[-1])
            return ''.join(pkt)

        self.sock.sendall(struct.pack('!I', len(buf)))
        self.sock.sendall(buf)

        return recv(struct.unpack('!I', recv(4))[0])

    def get_state(self):
        return json.loads(self.request(struct.pack('!B', 0)))


if '__main__' == __name__:
    parser = optparse.OptionParser()
    parser.add_option('--port', dest='port', type='int')
    parser.add_option('--cmd', dest='cmd', type='string')
    parser.add_option('--servers', dest='servers', type='string')
    opt, args = parser.parse_args()

    server_list = set(map(lambda x: (socket.gethostbyname(x[0]), int(x[1])),
                          map(lambda x: x.split(':'),
                              opt.servers.split(','))))

    if opt.port:
        os.dup2(os.open(
            'log.{0}'.format(time.strftime('%y%m%d', time.gmtime())),
            os.O_CREAT | os.O_WRONLY | os.O_APPEND), 2)

        loop = EPollLoop(opt.port, {100:StatsServer, 200:LockrServer})

        peer_state.update(dict((ip_port, None) for ip_port in server_list))

        for peer in peer_state:
            loop.connect(StatsClient(dict(ip=peer[0], port=peer[1], proto=100)))

        loop.run()
    else:
        cli = Lockr(server_list)

        if 'state' == opt.cmd:
            print(json.dumps(cli.get_state(), indent=4, sort_keys=True))
